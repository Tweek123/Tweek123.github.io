{"version":3,"sources":["actions/actions.js","components/forms/form-send-request.js","components/forms/form-websocket.js","utils.js","components/history.js","components/messages.js","components/pages/home-page.js","serviceWorker.js","reducers/request-reducer.js","reducers/websocket-reducer.js","api/Api.js","sagas/sagas.js","reducers/reducer.js","store.js","index.js"],"names":["addRequestInHistory","request","type","addRequest","loadWebsocketMessage","message","loadWebsocket","websocket","stackRun","run","FormSendRequest","dispatch","useDispatch","useState","visibility","setVisibility","name","className","onSubmit","e","preventDefault","url","target","value","data","JSON","parse","placeholder","id","defaultChecked","onChange","FormWebsocket","dictElement","dict","dictArray","key","push","String","getStatusAndHeaders","response","result","headers","status","entries","History","history","useSelector","state","requestReducer","useEffect","historyElement","index","method","body","stringify","Date","date","onClick","handleSubmit","attributes","historyRequest","map","element","historyElements","Messages","messages","websocketReducer","messagesElements","HomePage","Boolean","window","location","hostname","match","initialState","stack","fetchGET","requestInit","mode","cache","credentials","redirect","referrerPolicy","fetch","then","json","fetchPOST","fetchPUT","fetchDELETE","watchSendRequest","watchConnectWebsocket","checkStack","runStack","requestSend","initializeWebSocketsChannel","rootSaga","takeEvery","select","put","actions","length","apiReducer","now","console","error","call","Api","createEventChannel","socket","eventChannel","emit","onmessage","close","action","WebSocket","channel","take","all","combineReducers","localStorage","setItem","getItem","log","shift","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.aeea53be.chunk.js","sourcesContent":["export const addRequestInHistory = (request) => {\r\n    return {type: \"ADD_REQUEST_IN_HISTORY\", request}\r\n};\r\nexport const addRequest = (request) => { return {type: \"ADD_REQUEST_IN_STACK\", request}};\r\nexport const loadHistoryFromStorage = () => { return {type: \"LOAD_HISTORY\"}};\r\nexport const shiftStack = () => {return {type: \"SHIFT_STACK\"}};\r\nexport const connectWebsocket = (url) => {return {type: \"CONNECT_WEBSOCKET\", url}};\r\nexport const loadWebsocketMessage = (message) => {return {type: \"LOAD_WEBSOCKET_MESSAGE\", message}};\r\nexport const loadWebsocket = (websocket) => {return {type: \"LOAD_WEBSOCKET\", websocket}}\r\nexport const disconnectWebsocket = () => {return {type: \"DISCONNECT_WEBSOCKET\"}}\r\nexport const stackRun = (run) => {return {type: \"STACK_RUN\", run}} ","import React, {useState} from \"react\";\r\nimport { useDispatch} from \"react-redux\";\r\nimport { addRequest } from \"../../actions/actions\";\r\n\r\nexport default function FormSendRequest() {\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const [visibility, setVisibility] = useState(false);\r\n    \r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        const request = {\r\n            url: e.target.url.value, \r\n            type: e.target.type.value, \r\n            data: e.target.data.value ? JSON.parse(e.target.data.value) : null\r\n        }\r\n\r\n        dispatch(addRequest(request));\r\n    };\r\n   \r\n\r\n    return (\r\n        <form name=\"addRequest\" className={\"form\"} onSubmit={handleSubmit}>\r\n            <h2>Reqeusts</h2>\r\n            <div className={\"form__item\"}>\r\n                <input className={\"form__input-text\"} type=\"text\" placeholder=\"URL\" name=\"url\"/>\r\n            </div>\r\n            <label className={\"form__item\"}>\r\n                GET\r\n                <input value = \"GET\" id=\"GET\" type=\"radio\" name=\"type\" defaultChecked onChange={() => setVisibility(false)}/>\r\n            </label>\r\n            <label className={\"form__item\"}>\r\n                POST\r\n                <input type=\"radio\" value = \"POST\" id = \"POST\" name=\"type\" onChange={() => setVisibility(true)}/>\r\n            </label>\r\n            <label className={\"form__item\"}>\r\n                PUT\r\n                <input type=\"radio\" value = \"PUT\" id=\"PUT\" name=\"type\" onChange={() => setVisibility(true)}/>\r\n            </label>\r\n            <label className={\"form__item\"}>\r\n                DELETE\r\n                <input type=\"radio\" value = \"DELETE\" id = \"DELETE\" name=\"type\" onChange={() => setVisibility(true)}/>\r\n            </label>\r\n            <div className={\"form__item\"}>\r\n                <input type=\"text\" placeholder=\"data\" name=\"data\" className={visibility ?  \"\": \"hidden\"}/>\r\n            </div>\r\n            <div className={\"form__item\"}>\r\n                <button className={\"form__button\"} type=\"submit\">send</button>\r\n            </div>            \r\n        </form>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useDispatch} from \"react-redux\";\r\nimport { connectWebsocket } from \"../../actions/actions\";\r\n\r\nexport default function FormWebsocket() {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch(connectWebsocket(e.target.url.value));\r\n    }\r\n\r\n    \r\n    return (\r\n        <form name=\"websocket\" className={\"form\"} onSubmit={handleSubmit}>\r\n            <h2>Websocket</h2>\r\n            <div className={\"form__item\"}>\r\n                <input type=\"text\" className={\"form__input-text\"} placeholder=\"URL\" name=\"url\"/>\r\n            </div>\r\n            <div className={\"form__item\"}>\r\n                <button className={\"form__button\"} type=\"submit\">connect</button>\r\n            </div>     \r\n        </form>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport const dictElement = (dict) => {\r\n    const dictArray = []; \r\n    for (const key in dict) {\r\n        dictArray.push(   \r\n                <div className=\"dict-element\" key={key}>\r\n                    {key} : {String(dict[key])}\r\n                </div>\r\n        )\r\n    }\r\n\r\n    return dictArray;\r\n}\r\n\r\nexport const getStatusAndHeaders = (response) => {\r\n    const result = {\r\n        headers: {},\r\n        status: response.status\r\n    }\r\n\r\n    for (const [key, value] of response.headers.entries()) {\r\n        result.headers[key] = value;\r\n      }\r\n\r\n      return result;\r\n}","import React, {useEffect} from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { loadHistoryFromStorage } from '../actions/actions';\r\nimport { addRequest } from \"../actions/actions\";\r\nimport { dictElement } from \"../utils\"\r\n\r\nconst History = () =>  {\r\n    const history = useSelector(state => state.requestReducer.history);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(loadHistoryFromStorage())\r\n      }, history);\r\n    \r\n    const historyElements = (history) =>  {\r\n        return history.map((element,index) => {\r\n            return historyElement(element, index); \r\n          });\r\n    }\r\n\r\n\r\n    const historyElement = (historyElement, index ) => {\r\n        return (<tr className=\"table__row\" key={index}>\r\n                    <td className=\"table__col\">\r\n                        { historyElement.request.url }\r\n                    </td>\r\n                    <td className=\"table__col\">\r\n                        { historyElement.request.method }\r\n                    </td>\r\n                    <td className=\"table__col\">\r\n                        {dictElement(historyElement.request.headers)}\r\n                    </td>\r\n                    <td className=\"table__col\">\r\n                        \r\n                        { historyElement.request.body ? historyElement.request.body: \"not send\" }\r\n                    </td>\r\n                    <td className=\"table__col\">\r\n                        { historyElement.response.status }\r\n                    </td>\r\n                    <td className=\"table__col\">\r\n                        { dictElement(historyElement.response.headers) }\r\n                    </td>\r\n                    <td className=\"table__col\">\r\n                        { historyElement.response.body ? JSON.stringify(historyElement.response.body): \"not send\" }\r\n                    </td>\r\n                    <td className=\"table__col\">\r\n                        {String(new Date(historyElement.date))}\r\n                    </td>\r\n                    <td className=\"table__col\">\r\n                        <button className={\"table__button\"} type=\"submit\" onClick={handleSubmit} index={index} >send</button>\r\n                    </td>\r\n                </tr>)\r\n    }\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n       const index = e.target.attributes.index.value;\r\n       const historyRequest = history[index].request;\r\n       \r\n       const request = {\r\n           url: historyRequest.url,\r\n           type: historyRequest.method,\r\n           data: historyRequest.body ? JSON.parse(historyRequest.body) : null\r\n       }\r\n\r\n       dispatch(addRequest(request));\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <table className={\"table\"}>\r\n            <tbody>\r\n            <tr className={\"table__header\"}>\r\n                <th className={\"table__header-col\"}>URL</th>\r\n                <th className={\"table__header-col\"}>method</th>\r\n                <th className={\"table__header-col\"}>request headers</th>\r\n                <th className={\"table__header-col\"}>request body</th>\r\n                <th className={\"table__header-col\"}>response status</th>\r\n                <th className={\"table__header-col\"}>response headers</th>\r\n                <th className={\"table__header-col\"}>response body</th>\r\n                <th className={\"table__header-col\"}>date</th>\r\n                <th className={\"table__header-col\"}>send request</th>\r\n            </tr>\r\n                {historyElements(history)}\r\n           </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default History;","import React from \"react\";\r\nimport { useSelector } from 'react-redux';\r\nimport { dictElement } from \"../utils\"\r\n\r\nconst Messages = () =>  {\r\n    const messages = useSelector(state => state.websocketReducer.messages);\r\n    const messagesElements = (messages) => {\r\n        return messages.map((message) => {\r\n        return (<div className=\"messages__item\">{dictElement(message)}</div>)\r\n        })\r\n    }\r\n    \r\n    return (\r\n        <div className=\"messages\">\r\n            <h2>Messages Log</h2>\r\n            {messagesElements(messages)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Messages;","import React from 'react';\r\nimport FormSendRequest from '../forms/form-send-request'\r\nimport FormWebsocket from '../forms/form-websocket'\r\nimport History from '../history'\r\nimport Messages from '../messages'\r\nexport default function HomePage() {\r\n    return (\r\n      <div>\r\n        <FormSendRequest/>\r\n        <FormWebsocket/>\r\n        <History/>\r\n        <Messages/>\r\n      </div>\r\n    );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    history: [],\r\n    stack: [],\r\n    stackRun: false\r\n}\r\n\r\nexport default function reducer(state = initialState, action) {\r\n    switch (action.type) {\r\n      case \"ADD_REQUEST_IN_HISTORY\": \r\n      state.history.push(action.request);\r\n      localStorage.setItem('history', JSON.stringify(state.history));  \r\n      return {...state, history: [...state.history]};\r\n      \r\n      case \"ADD_REQUEST_IN_STACK\":\r\n      state.stack.push(action.request);\r\n      return {...state}\r\n\r\n      case \"LOAD_HISTORY\":\r\n      state.history = JSON.parse(localStorage.getItem('history'));\r\n      if(!state.history) {\r\n        state.history = [];\r\n      }\r\n      return {...state, history: [...state.history]}\r\n\r\n      case \"SHIFT_STACK\":\r\n      console.log(\"??\");\r\n      state.stack.shift();\r\n      return {...state}\r\n      \r\n      case \"STACK_RUN\":\r\n      state.stackRun = action.run;\r\n      return {...state}\r\n      default:\r\n        return state;\r\n    }\r\n  }","const initialState = {\r\n    messages: [],\r\n    websocket: null\r\n}\r\n\r\nexport default function reducer(state = initialState, action) {\r\n    switch (action.type) {          \r\n        case \"CONNECT_WEBSOCKET\":\r\n        return {...state}\r\n        case \"LOAD_WEBSOCKET_MESSAGE\":\r\n        state.messages.push(action.message);\r\n        return {...state, messages: [...state.messages]}\r\n        case \"LOAD_WEBSOCKET\":\r\n        state.websocket = action.websocket;\r\n        return {...state}\r\n        case \"DISCONNECT_WEBSOCKET\":\r\n        if(state.websocket) {\r\n            state.websocket.close();\r\n        }\r\n        return {...state}\r\n\r\n        default:\r\n          return state;\r\n      }\r\n  }","import \"regenerator-runtime/runtime\";\r\nimport { getStatusAndHeaders } from \"../utils\" ;\r\n\r\nexport function fetchGET(url) {\r\n    const requestInit = {\r\n      method: 'GET',\r\n      mode: 'cors',\r\n      cache: 'no-cache',\r\n      credentials: 'same-origin', \r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n        \r\n      },\r\n      redirect: 'follow', \r\n      referrerPolicy: 'no-referrer'\r\n    }\r\n\r\n    const request = {\r\n      url,\r\n      ...requestInit\r\n    } \r\n\r\n    const result = {\r\n      request,\r\n      response: {}\r\n    }\r\n\r\n    return fetch(request.url,requestInit)\r\n    .then(response => \r\n      {\r\n        result.response = getStatusAndHeaders(response);\r\n        return response.json()\r\n      })\r\n    .then(data => {\r\n        result.response.body = data;\r\n        return result;\r\n    })\r\n}\r\n\r\n\r\nexport function fetchPOST(url, data) {\r\n  const requestInit = {\r\n    method: 'POST',\r\n    mode: 'cors',\r\n    cache: 'no-cache',\r\n    credentials: 'same-origin', \r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n      \r\n    },\r\n    redirect: 'follow', \r\n    referrerPolicy: 'no-referrer',\r\n    body: JSON.stringify(data)\r\n  }\r\n\r\n\r\n  const request = {\r\n    url,\r\n    ...requestInit\r\n  } \r\n  \r\n  const result = {\r\n    request,\r\n    response: {}\r\n  }\r\n\r\n  return fetch(request.url,requestInit)\r\n  .then(response => \r\n    {\r\n      result.response = getStatusAndHeaders(response);\r\n      return response.json()\r\n    })\r\n  .then(data => {\r\n      result.response.body = data;\r\n      return result;\r\n  })\r\n}\r\n\r\nexport function fetchPUT(url, data) {\r\n  const requestInit = {\r\n    method: 'PUT',\r\n    mode: 'cors',\r\n    cache: 'no-cache',\r\n    credentials: 'same-origin', \r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n      \r\n    },\r\n    redirect: 'follow', \r\n    referrerPolicy: 'no-referrer',\r\n    body: JSON.stringify(data)\r\n  }\r\n\r\n\r\n  const request = {\r\n    url,\r\n    ...requestInit\r\n  } \r\n  \r\n  const result = {\r\n    request,\r\n    response: {}\r\n  }\r\n\r\n\r\n  return fetch(request.url,requestInit)\r\n  .then(response => \r\n    {\r\n      result.response = getStatusAndHeaders(response);\r\n      return response.json()\r\n    })\r\n  .then(data => {\r\n      result.response.body = data;\r\n      return result;\r\n  })\r\n}\r\n\r\nexport function fetchDELETE(url, data) {\r\n  const requestInit = {\r\n    method: 'DELETE',\r\n    mode: 'cors',\r\n    cache: 'no-cache',\r\n    credentials: 'same-origin', \r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n      \r\n    },\r\n    redirect: 'follow', \r\n    referrerPolicy: 'no-referrer',\r\n    body: JSON.stringify(data)\r\n  }\r\n\r\n\r\n  const request = {\r\n    url,\r\n    ...requestInit\r\n  } \r\n  \r\n  const result = {\r\n    request,\r\n    response: {}\r\n  }\r\n\r\n\r\n    return fetch(request.url,requestInit)\r\n    .then(response => \r\n      {\r\n        result.response = getStatusAndHeaders(response);\r\n        return response.json()\r\n      })\r\n    .then(data => {\r\n        result.response.body = data;\r\n        return result;\r\n    })\r\n}\r\n","import { put,  call, all, select, take, takeEvery  } from 'redux-saga/effects'\r\nimport {eventChannel} from 'redux-saga';\r\nimport * as Api from '../api/Api';\r\nimport * as actions from '../actions/actions'\r\n\r\nexport function* watchSendRequest() {\r\n    yield takeEvery('ADD_REQUEST_IN_STACK', checkStack);\r\n}\r\n\r\nexport function* watchConnectWebsocket() {\r\n    yield takeEvery('CONNECT_WEBSOCKET', initializeWebSocketsChannel);\r\n}\r\n\r\nexport function* checkStack() {\r\n    const stackRun = yield select(state => state.requestReducer.stackRun)\r\n    if(!stackRun) {\r\n        yield put(actions.stackRun(true))\r\n        yield runStack();\r\n    }\r\n}\r\nexport function* runStack() {\r\n    let stack = yield select(state => state.requestReducer.stack);\r\n    const request = stack[0];\r\n    yield put(actions.shiftStack());\r\n    yield requestSend(request);\r\n    stack = yield select(state => state.requestReducer.stack);\r\n    if(stack.length)  {\r\n        yield runStack();\r\n    } else {\r\n        yield put(actions.stackRun(false))\r\n    }\r\n}\r\n\r\nexport function* requestSend(request) {\r\n   try {\r\n        const result = yield apiReducer(request.type, request.url, request.data);\r\n        result.date = Date.now();\r\n        yield put(actions.addRequestInHistory(result))   \r\n    }\r\n    catch(e) {\r\n        console.error(e)\r\n    }\r\n}\r\n\r\nfunction apiReducer(type, url, data) {\r\n    switch(type) {\r\n        case \"GET\":\r\n        return call(Api.fetchGET, url, data);\r\n\r\n        case \"POST\":\r\n        return call(Api.fetchPOST, url, data);\r\n\r\n\r\n        case \"PUT\":\r\n        return call(Api.fetchPUT, url, data);\r\n\r\n        case \"DELETE\":\r\n        return call(Api.fetchDELETE , url, data);\r\n\r\n        default:\r\n            return null\r\n    }\r\n}\r\n\r\nfunction createEventChannel(socket) {\r\n    return eventChannel(emit => {\r\n      socket.onmessage = (message) => {emit(JSON.parse(message.data))}\r\n      return () => {\r\n        socket.close();\r\n      };\r\n    });\r\n  }\r\n\r\n\r\n  function* initializeWebSocketsChannel(action) {\r\n    try {\r\n        yield put(actions.disconnectWebsocket());\r\n        const websocket = new WebSocket(action.url);\r\n        yield put(actions.loadWebsocket(websocket));\r\n        const channel = yield call(createEventChannel, websocket);\r\n        while (true) {\r\n          const message = yield take(channel);\r\n          yield put(actions.loadWebsocketMessage(message));\r\n        }\r\n    } catch(e) {\r\n        console.error(e)\r\n    }\r\n  }\r\n  \r\n  \r\n\r\n\r\nexport function* rootSaga() {\r\n    yield all([\r\n        watchSendRequest(),\r\n        watchConnectWebsocket()\r\n    ])\r\n  }","import {combineReducers } from 'redux'\r\nimport requestReducer from './request-reducer';\r\nimport websocketReducer from './websocket-reducer';\r\nexport default combineReducers({\r\n    requestReducer,\r\n    websocketReducer\r\n  })","import { createStore,combineReducers, applyMiddleware } from 'redux'\r\nimport requestReducer from './reducers/request-reducer';\r\nimport websocketReducer from './reducers/websocket-reducer';\r\nimport createSagaMiddleware from 'redux-saga'; \r\nimport { rootSaga } from './sagas/sagas';\r\nimport rootReducer from './reducers/reducer'\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(sagaMiddleware)\r\n  )\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport HomePage from './components/pages/home-page'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store'\n\n\nReactDOM.render((  \n  <Provider store={store}>\n    <React.StrictMode>\n      <HomePage />\n    </React.StrictMode>,\n  </Provider>\n  ),\n  document.getElementById('root'))\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}